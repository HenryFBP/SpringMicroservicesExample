# -*- mode: ruby -*-
# vi: set ft=ruby :

# monkey patch for https://github.com/hashicorp/vagrant/issues/8878
class VagrantPlugins::ProviderVirtualBox::Action::Network
  def dhcp_server_matches_config?(dhcp_server, config)
    true
  end
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "kalilinux/rolling"
  config.vm.box_version = "2019.4.0"
#  config.vm.box = "kalilinux/rolling-light"

  # disables ssh keys, use uname/pw
  config.ssh.username = "vagrant"
  config.ssh.password = "vagrant"


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 9392, host: 9392, host_ip: "127.0.0.1" # openvas

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.7"

  # see https://www.virtualbox.org/manual/ch06.html
  # config.vm.network "private_network", type: "dhcp" # DHCP private lan for interacting with other boxes

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "shared/", "/vagrantshared"

  # disable defalt share
  config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #

  config.ssh.insert_key = false # Fix for NTFS drives
  config.disksize.size = '150GB'

  # VirtualBox specific settings
  config.vm.provider "virtualbox" do |vb|
    # Show the VirtualBox GUI when booting the machine
    vb.gui = true

    # Customize the amount of memory on the VM:
    vb.memory = "8192"

  end

  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.

  # initial apt-get update
  config.vm.provision "shell", inline: <<-SHELL
      apt-get update
  SHELL

  # copy add-apt-repository
  config.vm.provision "file", source:"scripts/add-apt-repository.sh", destination: "/tmp/add-apt-repository"

  # Copy useful scripts to desktop
  config.vm.provision "file",
                      source:"scripts/desktop-scripts/tor-transparent-proxy-start.sh",
                      destination: "/home/vagrant/Desktop/"

  config.vm.provision "file",
                       source:"scripts/desktop-scripts/tor-transparent-proxy-stop.sh",
                       destination: "/home/vagrant/Desktop/"

  # make add-apt-repository executable
  config.vm.provision "shell", run: "always", inline: <<-SHELL
    sudo mv /tmp/add-apt-repository /usr/sbin/add-apt-repository

    chmod +x /usr/sbin/add-apt-repository
  SHELL

  # start timer
  config.vm.provision "shell", run: "always", inline: <<-SHELL
  
    echo `date` > /home/vagrant/start_vagrant_config
  SHELL

  # resize main partition to max size
  config.vm.provision "shell", path: "scripts/resize-default-partitions-to-disk.sh"

  # clone cool repos
  config.vm.provision "shell", path: "scripts/clone-cool-git-repos.sh"

  # useful tools
  config.vm.provision "shell", inline: <<-SHELL
    # apt-get upgrade -y # takes too long...

    sudo gem install mdless

    apt-get install -y htop iftop cpu-checker gedit transmission baobab nano tcpdump maven
    apt-get install -y snapd
    apt-get install -y kleopatra thunderbird

    if ! dpkg -s "docker-ce" 2>/dev/null; then
      echo "Installing docker-ce as it is not installed."
      curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
      echo 'deb [arch=amd64] https://download.docker.com/linux/debian buster stable' | sudo tee /etc/apt/sources.list.d/docker.list
      apt-get update
      apt-get install -y docker-ce
    else
      echo "docker-ce is installed."
    fi

    sudo systemctl enable docker

    apt-get install -y libreoffice-writer
    sudo systemctl enable snapd.service
    sudo systemctl start snapd.service

    sudo systemctl enable apparmor # Required for `snap run` to work
    sudo systemctl start apparmor # This will stop SSH AFAIK

    snap install discord
    snap install wickrme

    # enpass
    if ! dpkg -s "enpass" 2>/dev/null; then
      echo "Installing enpass as it is not installed."
      echo "deb https://apt.enpass.io/ stable main" > /etc/apt/sources.list.d/enpass.list
      wget -O - https://apt.enpass.io/keys/enpass-linux.key | apt-key add -
      apt-get update
      apt-get install -y enpass
    else
      echo "enpass is installed."
    fi

    # init msfdb
    sudo msfdb init

  SHELL

  # KVM for android studio
  config.vm.provision "shell", inline: <<-SHELL
    sudo apt install -y qemu-kvm libvirt0 virt-manager bridge-utils
  SHELL

  # virtualbox extensions
  config.vm.provision "shell", inline: <<-SHELL
    apt-get install -y build-essential dkms linux-headers-$(uname -r)
    apt-get install -y virtualbox-dkms virtualbox-guest-additions-iso virtualbox-guest-x11

    echo "REBOOT for a larger screen and other virtualbox-guest-additions goodies."

  SHELL

  # kalitorify, a systemwide tor proxy service.
  config.vm.provision "shell", inline: <<-SHELL

  apt-get install -y tor torbrowser-launcher

  which kalitorify
  # if exit code is nonzero, kalitorify is not a command.

  if [ "$?" -eq "1" ]; then

    pushd /home/vagrant/Desktop/
    git clone https://github.com/brainfucksec/kalitorify.git
    pushd kalitorify

    make install
    chown -R vagrant:vagrant /home/vagrant/Desktop/kalitorify

    echo "Kaltorify installed. Reboot and run 'kalitorify' to get started."

    popd

    rm -rf kalitorify

    popd

  else
    which kalitorify
    echo "Kalitorify is already installed. Exit status $?"
  fi

  SHELL

  # Android studio
  config.vm.provision "shell", inline: <<-SHELL

    sudo snap install android-studio --classic

  SHELL

  # stop timer
  config.vm.provision "shell", run: "always", inline: <<-SHELL
  
    echo `date` > /home/vagrant/stop_vagrant_config  

    echo "Start time:"
    cat /home/vagrant/start_vagrant_config

    echo "Stop time:"
    cat /home/vagrant/stop_vagrant_config

  SHELL

  # set password to something more secure
  config.vm.provision "shell", inline: <<-SHELL
  
  exit 0 # Disabled for people who can't paste

  if [ -f /home/vagrant/my_password_is_random ]; then
    echo "Already changed default password."
  fi

  newpassword=`openssl rand -base64 32`
  
  echo "vagrant:$newpassword" | chpasswd

  echo "The new password of the user 'vagrant' is now '$newpassword' -- write it down."
  
  newpassword="im gone now :)"

  touch /home/vagrant/my_password_is_random

  SHELL

end
